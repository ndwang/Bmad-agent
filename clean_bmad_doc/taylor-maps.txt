chapter Taylor Maps

A transport map \cal M: \cal R^6 \rightarrow \cal R^6 through an element or a section of a
lattice is a function that maps the starting phase space coordinates r(\In) to the ending
coordinates r(\Out)
  r(\Out) = \cal M \, (\delta r)
where
  \delta r = r(\In) - r_\REF
r_\REF is the reference orbit at the start of the map around which the map is made. In many
cases the reference orbit is the zero orbit. For a storage ring, the closed orbit is commonly used
for the reference orbit. For a lattice with an open geometry the reference orbit may be the orbit as
computed from some given initial coordinates.

\cal M in the above equation is made up of six functions \cal M_i: \cal R^6 \rightarrow
\cal R. Each of these functions maps to one of the r(\Out) coordinates. Each of these functions
can be expanded in a Taylor series and truncated at some order. Each Taylor series is in the form
  r_i(\Out) = \sum_j = 1^N \, C_ij \, \prod_k = 1^6 \, (\delta r_k)^e_ijk
Where the C_ij are coefficients and the e_ijk are integer exponents.  The order of a given
term associated with index i,j is the sum over the exponents
  \textorder_ij = \sum_k = 1^6 e_ijk 
The order of the entire map is the order at which the map is truncated.

The standard Bmad routine for printing a Taylor map might produce something like this:
   Taylor Terms:
   Out      Coef             Exponents          Order       Reference
   --------------------------------------------------
    1:     -0.600000000000   0  0  0  0  0  0       0       0.200000000
    1:      1.000000000000   1  0  0  0  0  0       1
    1:      0.145000000000   2  0  0  0  0  0       2
   --------------------------------------------------
    2:     -0.185000000000   0  0  0  0  0  0       0       0.000000000
    2:      1.300000000000   0  1  0  0  0  0       1
    2:      3.800000000000   2  0  0  0  0  1       3
   --------------------------------------------------
    3:      1.000000000000   0  0  1  0  0  0       1       0.100000000
    3:      1.600000000000   0  0  0  1  0  0       1
    3:    -11.138187077310   1  0  1  0  0  0       2
   --------------------------------------------------
    4:      1.000000000000   0  0  0  1  0  0       1       0.000000000
   --------------------------------------------------
    5:      0.000000000000   0  0  0  0  0  0       0       0.000000000
    5:      0.000001480008   0  1  0  0  0  0       1
    5:      1.000000000000   0  0  0  0  1  0       1
    5:      0.000000000003   0  0  0  0  0  1       1
    5:      0.000000000003   2  0  0  0  0  0       2
   --------------------------------------------------
    6:      1.000000000000   0  0  0  0  0  1       1       0.000000000
Each line in the example represents a single "Taylor term". The Taylor terms are grouped into 6
"Taylor series". There is one series for each of the output phase space coordinate. The first
column in the example, labeled "out", (corresponding to the i index in \Eqrcr) indicates the
Taylor series: 1 = x(out), 2 = p_x(out), etc. The 6 exponent columns give the e_ijk of
\Eqrcr. In this example, the second Taylor series ("out" = 2), when expressed as a formula,
would read:
  p_x(out) = -0.185 + 1.3 \, \delta p_x + 3.8 \, \delta x^2 \, \delta p_z

The reference column in the above example shows the input coordinates around which the Taylor map is
calculated. In this case, the reference coordinates where
  (x, p_x, y, p_y, z, p_z)_\REF = (0.2, 0, 0.1, 0, 0, 0, 0)
The choice of the reference point will affect the values of the coefficients of the Taylor map. As
an example, consider the 1-dimension map
  x(out) = A \, \sin(k \, \delta x)
Then a Taylor map to 1\St order is
  x(out) = c_0 + c_1 \, \delta x
where
  c_1= A \, k \, \cos(k \, x_\REF) 
  c_0= A \, \sin(k \, x_\REF)

Taylor maps using complex numbers is also used by Bmad. The output of such maps is similar to the
output for real maps as shown above except that the coefficient has a real and imaginary part.

A Taylor map that fully describes spin  and orbital motion, would consist of nine
Taylor series (six for the orbital phase space variables and three for the spin components) and each
Taylor series would be a polynomial in nine variables.

To simplify things, Bmad assumes that the effect on the orbital phase space due to the spin
orientation is negligible. That is, Stern-Gerlach effects are ignored. With this assumption, the
orbital part of the map is only dependent on the six orbital variables. This means that
\pmb\Omega_BMT and \pmb\Omega_EDM in the Thomas-Bargmann-Michel-Telegdi equation
, are assumed independent of the spin. Thus the spin transport is just a rotation.
Bmad represents this rotation using a quaternion . Each of the four components of
the quaternion is a Taylor series and the full phase space plus spin transport uses 10 (= 6 orbital
+ 4 spin) Taylor series with each Taylor series only being dependent on the six orbital phase space
coordinates.

Spin transport involves:
* Using the six orbital coordinates, evaluate the four spin Taylor series to produce a quaternion q.
* Normalize the quaternion to one: q \longrightarrow q/|q|.
* Rotate the spin vector: S \longrightarrow q \, S \, q^-1.
The  normalization of the quaternion is needed since the truncation of the map to a finite order will produce errors
in the magnitude of the quaternion.

The standard Bmad routine for printing a spin Taylor map will produce a result that is very similar
as that produced for the orbital phase space. The difference is that there will only be four Taylor
series labeled ("S1", "Sx", "Sy", "Sz") for the four components of the quaternion. Also the reference orbit
will not be shown (it is exactly the same as the orbital phase space reference orbit).

Note: When tracking a particle's spin through a map, the quaternion used to rotate the spin is
always normalized to one so that the magnitude of the spin will be invariant.

If the evolution of a system can be described using a Hamiltonian then
it can be shown that the linear part of any transport map (the Jacobian)
must obey the symplectic condition. If a matrix M is not symplectic,
Healy\citeb:healy has provided an elegant method for finding a symplectic 
matrix that is "close" to M. The procedure is as follows:
From M a matrix V is formed via
  V = S (I - M)(I + M)^-1 
where S is the matrix
  S = 
      0  1  0  0  0  0 \cr
     -1  0  0  0  0  0 \cr
      0  0  0  1  0  0 \cr
      0  0 -1  0  0  0 \cr
      0  0  0  0  0 -1 \cr
      0  0  0  0 -1  0 \cr
V is symmetric if and only if M is symplectic. In any case,
a symmetric matrix W near V can be
formed via
  W = \fracV + V^t2
A symplectic matrix F is now obtained by inverting \eqe:vsimi
  F = (I + S W) (I - S W)^-1

Of importance in working with Taylor maps is the concept of
"feed-down".  This is best explained with an example. To keep the
example simple, the discussion is limited to one phase space
dimension so that the Taylor maps are a single Taylor series. Take the
map M_1 from point 0 to point 1 to be
  M_1: x_1 = x_0 + 2
and the map M_2 from point 1 to point 2 to be
  M_2: x_2 = x_1^2 + 3 \, x_1
Then concatenating the maps to form the map M_3 from point 0 to point 2
gives
  M_3: x_2 = (x_0 + 2)^2 + 3 (x_0 + 2) = x_0^2 + 7 \, x_0 + 10
However if we are evaluating our maps to only 1\St order the map M_2
becomes
  M_2: x_2 = 3 \, x_1
and concatenating the maps now gives
  M_3: x_2 = 3 (x_0 + 2) = 3 \, x_0 + 6
Comparing this to \Eqxx23x2 shows that by neglecting the 2\Nd order
term in \Eqxx3x leads to 0\Th and 1\St order errors in
\Eqx3x23. These errors can be traced to the finite 0\Th order term in
\Eqxx2. This is the principal of feed--down: Given M_3 which is a map
produced from the concatenation of two other maps, M_1, and M_2
  M_3 = M_2(M_1)
Then if M_1 and M_2 are correct to n\Th order, M_3 will also be
correct to n\Th order as long as M_1 has no constant (0\Th order)
term. [Notice that a constant term in M_2 does not affect the
argument.]  What happens if we know there are constant terms in our
maps? One possibility is to go to a coordinate system where the
constant terms vanish. In the above example that would mean using the
coordinate \widetilde x_0 at point 0 given by
  \widetilde x_0 = x_0 + 2

Symplectic integration, as opposed to concatenation, never has
problems with feed--down. The subject of symplectic integration is too
large to be covered in this guide. The reader is referred to the book
"Beam Dynamics: A New Attitude and Framework" by \'Etienne
Forest\citeb:forest. A brief synopsis: Symplectic integration uses
as input 1) The Hamiltonian that defines the equations of motion, and
2) a Taylor map M_1 from point 0 to point 1. Symplectic integration
from point 1 to point 2 produces a Taylor map M_3 from point 0 to
point 2. Symplectic integration can produce maps to arbitrary
order. In any practical application the order n of the final map is
specified and in the integration procedure all terms of order higher
than n are ignored. If one is just interested in knowing the final
coordinates of a particle at point 2 given the initial coordinates at
point 1 then M_1 is just the constant map
  M_1: x_1 = c_i
where c_i is the initial starting point. The order of the integration is set to 0 so that all
non--constant terms are ignored. The final map is also just a constant map
  M_3: x_2 = c_f
If the map from point 1 to point 2 is desired then the map M_1 is just set to the identity map
  M_1: x_1 = x_0
In general it is impossible to exactly integrate any non--linear system. In practice, the symplectic
integration is achieved by slicing the interval between point 1 and point 2 into a number of
(generally equally spaced) slices. The integration is performed, slice step by slice step. This is
analogous to integrating a function by evaluating the function at a number of points. Using more
slices gives better results but slows down the calculation. The speed and accuracy of the
calculation is determined by the number of slices and the "order" of the integrator. The concept
of integrator order can best be understood by analogy by considering the trapezoidal rule for
integrating a function of one variable:
  \int_y_a^y_b f(y) \, dy = 
  h \left[ \frac12 f(y_a) + \frac12 f(y_b) \right] +
  o(h^3 \, f^(2))
In the formula h = y_b - y_a is the slice width. 0(h^3 \, f^(2)) means that the error of the
trapezoidal rule scales as the second derivative of f. Since the error scales as f^(2) this is
an example of a second order integrator. To integrate a function between points y_1 and y_N we
slice the interval at points y_2 \ldots y_N-1 and apply the trapezoidal rule to each
interval. The concept of integrator order in symplectic integration is analogous.

The optimum number of slices is determined by the smallest number that gives an acceptable
error. The slice size is given by the "ds_step" attribute of an element .
Integrators of higher order will generally need a smaller number of slices to achieve a given
accuracy. However, since integrators of higher order take more time per slice step, and since it is
computation time and not number of slices which is important, only a measurement of error and
calculation time as a function of slice number and integrator order will unambiguously give the
optimum integrator order and slice width.  In doing a timing test, it must be remembered that since
the magnitude of any non-nonlinearities will depend upon the starting position, the integration
error will be dependent upon the starting map M_1. Bmad has integrators of order 2, 4, and 6
. Timing tests performed for some wiggler elements (which have strong
nonlinearities) showed that, in this case, the 2\Nd order integrator gave the fastest computation
time for a given accuracy. However, the higher order integrators may give better results for
elements with weaker nonlinearities.
