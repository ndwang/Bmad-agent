chapter Tracking and Transfer Maps

----------------------------------------------------------------

The "coord_struct" holds the coordinates of a particle The definition of the "coord_struct" is
  type coord_struct
    real(rp) vec(6)     ! (x, px, y, py, z, pz)
    real(rp) s          ! Longitudinal position.
    real(rp) t          ! Absolute time (not relative to reference).
    real(rp) spin(3)    ! (x, y, z) Spin vector
    real(rp) field(2)   ! Photon (x, y) field intensity.
    real(rp) phase(2)   ! Photon (x, y) phase.
    real(rp) charge     ! charge in a particle (Coul).
    real(rp) dt_dref    ! path length (used by coherent photons).
    real(rp) r          ! For general use. Not used by Bmad.
    real(rp) p0c        ! For non-photons: Reference momentum. Negative -> going backwards.
                        !     For photons: Photon momentum (not reference).
    real(rp) beta       ! Velocity / c_light. 
    integer ix_ele      ! Index of the lattice element the particle is in.
                        !   May be -1 or -2 if element is not associated with a lattice.
    integer ix_branch   ! Index of the lattice branch the particle is in.
    integer ix_user     ! Not used by Bmad
    integer state       ! alive$, lost$, lost_neg_x$, etc.
    integer direction   ! +1 or -1. Sign of longitudinal direction of motion (ds/dt).
                        !  This is independent of the element orientation.
    integer time_dir    ! +1 or -1. Time direction. -1 => Traveling backwards in time.
    integer species     ! Positron$, proton$, etc.
    integer location    ! upstream_end$, inside$, or downstream_end$
end type
Definitions:
*Direction of Travel 
The ""direction of travel"", also called the ""direction of motion"" is the direction
that the particle is moving in when traveling forward in time.

*Propagation Direction 
The ""propagation direction"" is the direction that a particle will be propagated in during
tracking. The propagation direction will be in the same direction as the direction of travel when
propagating a particle forward in time and will be opposite the direction of travel when
propagating a particle backwards in time.

*Reverse Tracking 
""Reverse tracking" refers to tracking a particle with "%direction" set to -1. That is,
tracking in the reverse direction longitudinally. The opposite to reverse tracking is called
""forward direction"" tracking.

*Backwards Tracking 
""Backwards Tracking" refers to tracking a particle backwards in time. That is, with
"%time_dir" = -1. The opposite to backwards tracking is called ""forward time"" tracking.
The components of the "coord_struct":
*%beta 
The normalized velocity v/c is stored in "%beta". "%beta" is always positive.

*%direction 
Longitudinal forward time "direction of travel". A setting of +1 (the default) is in the forward
+s (downstream) direction and a setting of -1 is in the reverse -s (upstream) direction
.  Notice that the setting of "direction" is independent of the
orientation of the lattice element the particle is traveling through. That is, for an element with
reversed "orientation" ("ele%orientation" = -1), a particle with "direction" = 1 will be
traveling towards the "entrance" end of the element (-z direction in body coordinates) and with
"direction" = -1 the particle will be traveling towards the "exit" (+z direction in body
coordinates) end . See "%time_dir".

*%time_dir 
Time direction that a particle is propagated through. A value of +1 (the default) is forward time
and a value of -1 is backwards time.

*%field_x, %field_y 
The "%field_x" and "%field_y" components are for photon tracking and are in units of
field/sqrt(cross-section-area). That is, the square of these units is an intensity. It is up to
individual programs to define an overall scaling factor for the intensity if desired.

*%ix_branch 
The "%ix_branch" component gives the index of the lattice branch in the "lat%branch(ib)" array
that the particle is in.

*%ix_ele 
The "%ix_ele" component gives the index of the element in the "lat%branch(ib)%ele(:)" array
that the particle is in. If the element is not associated with a lattice, "%ix_ele" is set to
-1. When initializing a "coord_struct" (see below), "%ix_ele" will be initialized to
"not_set$".

*%ix_user 
The "%ix_user" component is for use by code outside of the Bmad library.  This component will
not be modified by Bmad.

*%location 
The "%location" component indicates where a particle is longitudinally with respect to the
element being tracked. "%location" will be on of:
  entrance_end$
  inside$
  exit_end$
"entrance_end$" indicates that the particle is at the element's entrance ($-s$) end and
"exit_end$" indicates that the particle is at the element's exit ($+s$) end.  "inside$"
indicates that the particle is in between. If the element has edge fields (for example, the "e1"
and "e2" edge fields of a bend), a particle at the "entrance_end$" or "exit_end$" is
considered to be just outside the element.

*%p0c 
For charged-particles, the reference momentum in eV is stored in the "%p0c" component. For
photons, "%p0c" is the actual (not reference) momentum. For charged-particles, "%p0c" may be
negative if the particle is traveling backwards longitudinally. For photons, "%vec(6)"
(\beta_z) will be negative if the photon is going backward.

*%r 
The "%r" component is for use by code outside of the Bmad library. Bmad will not modify this
component.

*%s 
The "%s" component gives the absolute s-position of the particle. When tracking through an
element (say with Runge-Kutta tracking), and when the particle coordinates is expressed in element
body coordinates , the s-position at any point within the element, by
definition, is independent of any misalignments the element has as long as the element is not
reversed. If the element is reversed, the s-position is reversed as well.

*%spin(3) 
The "%spin(3)" component gives a particle's (x, y, z) spin vector .

*%state 
The "%state" component will be one of:
  not_set$
  pre_born$
  alive$
  lost$
  lost_neg_x$
  lost_pos_x$
  lost_neg_y$
  lost_pos_y$
  lost_z$
  lost_pz$
The "not_set$" setting indicates that the "coord_struct" has not yet been used in
tracking. The "alive$" setting indicates that the particle is alive. If a particle is "dead",
the "%state" component will be set to one of the other settings. The "lost_neg_x$"
setting indicates that the particle was lost at an aperture on the -x side of the element. The
"lost_z$" setting is used to indicate that the particle tried to "turn around". This
can happen, for example, with strong magnetic fields or when a particle has been decelerated too
much.  The reason why the particle is marked lost in this case is due to the fact that s-based
tracking algorithms cannot handle particles that reverse direction. The exception is that the
"time_runge_kutta"  tracking method can handle particle reversal so in this case,
particles will not be declared lost if they reverse direction.

The "lost$" setting is used when neither of the other "lost_*$" settings are not
appropriate. For example, "lost$" is used in Runge-Kutta tracking when the adaptive step size
becomes too small (this may happen if the fields do not obey Maxwell's equations).

To convert the integer value of "%state" to a string that can be printed, use the function
\Hyperrefr:coord.state.namecoord_state_name
  type (coord_struct) orbit
  print *, "State of the orbit: ", coord_state_name(orbit%state)

*%t 
"%t" gives the absolute time.

*%vec(:) 
The "%vec(:)" array defines the phase space coordinants . Note that for
photons, the definition of the phase space coordinates  is different
from that used for charged particles. The signs of "%vec(2)" and "%vec(4)" are such that, for
the signs of the change in "%vec(1)" and "%vec(3)" during propagation will be equal to the
product "%direction * %time_dir * sign_of(%vec(2)" and "%direction * %time_dir *
sign_of(%vec(2)" respectively.

To initialize a "coord_struct" so it can be used as the start of tracking, the
\Hyperrefr:init.coordinit_coord routine can be used:
  type (coord_struct) start_orb
  real(rp) phase_space_start(6)
  ...
  phase_space_start = [...]
  call init_coord (start_orb, phase_space_start, lat%ele(i), lat%param%particle)
Here "init_coord" will initialize "start_orb" appropriately for 
tracking through element "lat%ele(i)" with the particle species set to the 
species of the reference particle given by "lat%param%particle". 

----------------------------------------------------------------

\Hyperrefr:track1track1 is the routine used for tracking through a
single element
  type (coord_struct), start_orb, end_orb
  type (ele_struct) ele
  real(rp) start_phase_space(6)
  logical err
  ...
  start_phase_space = [...]
  call init_coord (start_orb, start_phase_space, ele, photon$) 
  call track1 (start_orb, ele, end_orb, err_flag = err)
  if (.not. particle_is_moving_forward(end_orb)) then
    print *, "Particle is lost and gone forever..."
  endif
To check if a particle is still traveling in the forward direction,
the \Hyperrefr:particle.is.moving.forwardparticle_is_moving_forward 
routine can be used as shown in the above example.

The "virtual" entrance and exit ends of a lattice element are, by definition, where the physical
ends of the element would be if there were no offsets. In particular, if an element has a finite
"z_offset" , the physical ends will be displaced from the virtual ends. The
position "ds" of a particle with respect to the physical entrance end of the element is
  ds = coord%s - (ele%s + ele%value(z_offset_tot$) - ele%value(l$))
When tracking through an element, the starting and ending positions always correspond to the virtual
ends. If there is a finite "z_offset", the tracking of the element will involve tracking through
drifts just before and just after the tracking of the body of the element so that the particle ends
at the proper virtual exit end.

Note: The z phase space component of the orbit ("%vec(5)") is independent of the value of
"ele%ref_time" even though the reference time is used to define z (See \Eqzbctt). This is
true since the starting reference time that is used for a particle is arbitrary. For example, when
tracking multiple bunches, the reference time is typically set so that a particle at the center of
a bunch has z = 0. Also, in a ring, "ele%ref_time" is only the reference time for the first turn
through an element. Since Bmad does not keep track of turn number, there is no way for Bmad to know
what the true reference time is other than to calculate it from the value of z 

----------------------------------------------------------------

When tracking through a lattice branch, one often defines an array of "coord_struct"s -- one for
each element of the lattice branch. In this case, the i\Th "coord_struct" corresponds to the
particle coordinates at the end of the i\Th element. Since the number of elements in the lattice
is not known in advance, the array must be declared to be allocatable. The lower bound of the array
must be set to zero to match a "lat%branch(i)%ele(:)" array.  The upper bound should be the upper
bound of the "%branch(i)%ele(:)" array.  The routine
\Hyperrefr:reallocate.coordreallocate_coord will allocate an array of "coord_struct"s:
  type (coord_struct), allocatable :: orbit(:)
  type (lat_struct) lat
  ...
  call reallocate_coord (orbit, lat, ix_branch)
Alternatively, the "save" attribute can be used so that the array
stays around until the next time the routine is called
  type (coord_struct), allocatable, save :: orb(:) 
Saving the "coord_stuct" is faster but leaves memory tied up. Note
that in the main program, the "save" attribute is not permitted If
a "coord_struct" array is passed to a routine, the routine must
explicitly set the lower bound to zero if the array is not declared as
allocatable:
  subroutine my_routine (orbit1, orbit2)
    use bmad
    implicit none
    type (coord_struct), allocatable :: orbit1(:)  ! OK
    type (coord_struct) orbit2(0:)                 ! Also OK
    ...
Declaring the array allocatable is mandatory if the array is to be resized
or the array is passed to a routine that declares it allocatable.

For an entire lattice, the "coord_array_struct" can be used to define an array
of "coord_array" arrays:
  type coord_array_struct
    type (coord_struct), allocatable :: orb(:)
  end type
The routine \Hyperrefr:reallocate.coord.arrayreallocate_coord_array will allocate an
"coord_array_struct" instance
  type (coord_array_struct), allocatable :: all_orbit(:)
  type (lat_struct) lat
  ...
  call reallocate_coord_array (all_orbit, lat)
  ...

Once an array of "coord_struct" elements is defined, the \Hyperrefr:track.alltrack_all 
routine can be used to track through a given lattice branch
  type (coord_struct), allocatable :: orbit(:)
  integer ib, track_state
  ...
  ib = 1                      ! Branch to track through
  call init_coord(orbit(0), init_phase_space, lat%branch(ib)%ele(0), proton$) 
  call track_all (lat, orbit, ib, track_state, err_flag)
  if (track_state /= moving_forward$) then
    print *, "Particle lost at element:", track_state
    print *, "Aperture lost at: ", coord_state_name(orbit(track_state)%state) 
After tracking, "orbit(i)" will correspond to the particles orbit
at the end of "lat%branch(ib)%ele(i)".  

For routines like "track_all" where an array of "coord_struct"s
is used, an integer "track_state" argument is provided that is set
to "moving_forward$" if the particle survives to the end, or is
set to the index of the element at which the particle either hit an
aperture or the particle's longitudinal velocity is reversed. 

The reason why the reversal of the particle's longitudinal velocity
stops tracking is due to the fact that the standard tracking routines,
which are s-based (that is, use longitudinal position s as the
independent coordinate), are not designed to handle particles that
reverse direction. To properly handle this situation, time-based
tracking needs to be used . Notice that this is
different from tracking a particle in the reversed (-s) direction.

Alternatively to "track_all", the routine
\Hyperrefr:track.manytrack_many can be used to track through a
selected number of elements or to track backwards (See
).

The "track_all" routine serves as a good example of how tracking
works. A condensed version of the code is shown in
\figf:track.all. The call to "track1" (line~18) tracks
through one element from the exit end of the n-1\St\ element to the
exit end of the n\Th element.

\small
  subroutine track_all (lat, orbit, ix_branch, track_state, err_flag)
    use bmad
    implicit none
    type (lat_struct), target :: lat
    type (branch_struct), pointer :: branch
    type (coord_struct), allocatable :: orbit(:)
    integer, optional :: ix_branch, track_state
    logical, optional :: err_flag
    logical err

    ! 

    branch => lat%param(integer_option(0, ix_branch))
    branch%param%ix_track = moving_forward
    if (present(track_state)) track_state = moving_forward$

    do n = 1, branch%n_ele_track
      call track1 (orbit(n-1), branch%ele(n), branch%param, orbit(n), err_flag = err)
      if (.not. particle_is_moving_forward(orbit(n))) then
        if (present(track_state)) track_state = n
        orbit(n+1:)%status = not_set
        return
      endif
    enddo
  end subroutine

----------------------------------------------------------------

Tracking from a "fork" or "photon_fork"  element
to the downstream "branch" is not "automatic". That is, since the
requirements of how to handle forking can vary greatly from one
situation to the next, Bmad does not try to track from one "branch"
to the next in any one of its tracking routines. 

The discussion here is restricted to the case where the particle being
tracked is simply transferred from the forking element to the downstream
branch. [Thus the subject of photon generation is not covered here.]

There are two cases discussed here. The first case is when a given
branch (called "to_branch") has an associated forking element in
the "from_branch" that forks to the beginning of the
"to_branch". Appropriate code is:
  type (lat_struct), target :: lat   ! Lattice 
  type (branch_struct) :: to_branch  ! Given forked-to branch
  type (branch_struct), pointer  :: from_branch ! Base branch
  type (ele_struct), pointer :: fork_ele
  type (coord_struct), allocatable :: from_orbit(:), to_orbit(:)
  integer ib_from, ie_from

  ib_from  = to_branch%ix_from_branch

  if (ib_from < 0) then
    ! Not forked to ...

  else
    from_branch => lat%branch(ib_from)
    ie_from = to_branch%ix_from_ele
    fork_ele => from_branch%ele(ie_from)
    to_orbit(0) = from_orbit(ie_from)
    call transfer_twiss (fork_ele, to_branch%ele(0))
  endif
"from_orbit(0:)" and "to_orbit(0:)" are arrays holding the
orbits at the exit end of the elements for the "from_branch" and
"to_branch" respectively. The call to \Hyperrefr:transfer.twisstransfer_twiss
transfers the Twiss values to the "to_branch" which can then be
propagated through the "to_branch" using "twiss_propagate_all".

The second case starts with the "fork_ele" forking element.  This
is similar to the first case but is a bit more general since here the
element, called "to_ele" in the "to_branch" that is connected to
"fork_ele" need not be the starting element of "to_branch".
  type (lat_struct), target :: lat   ! Lattice 
  type (branch_struct), pointer :: to_branch  ! forked-to branch
  type (ele_struct), pointer :: to_ele
  type (coord_struct), allocatable :: from_orbit(:), to_orbit(:)
  integer ib_to, ie_to

  ib_to  = nint(fork_ele%value(ix_to_branch$))
  ie_to  = nint(fork_ele%value(ix_to_element$))

  to_branch => lat%branch(ib_to)
  to_ele => to_branch%ele(ie_to)
  to_orbit(to_ele%ix_ele) = from_orbit(fork_ele%ix_ele)
Notice that, by convention, the transferred orbit is located at the
exit end of the "to_ele".

----------------------------------------------------------------

Multi-turn tracking over a branch is simply a matter of
setting the coordinates at the beginning zeroth element equal to the
last tracked element within a loop:
  type (lat_struct) lat             ! lattice to track through
  type (coord_struct), allocatable :: orbit(:)
  ...
  call reallocate_coord (orbit, lat, ix_branch = 1)
  orbit(0)%vec = [0.01, 0.2, 0.3, 0.4, 0.0, 0.0] ! init
  do i = 1, n_turns
    call track_all (lat, orbit, 1)
    orbit(0) = orbit(lat%branch(1)%n_ele_track)
  end do
Often times it is only the root branch, "branch(0)", that is to be tracked.
In this case, the above reduces to
  type (lat_struct) lat             ! lattice to track through
  type (coord_struct), allocatable :: orbit(:)
  ...
  call reallocate_coord (orbit, lat%n_ele_max)
  orbit(0)%vec = [0.01, 0.2, 0.3, 0.4, 0.0, 0.0] ! init
  do i = 1, n_turns
    call track_all (lat, orbit)
    orbit(0) = orbit(lat%n_ele_track)
  end do

----------------------------------------------------------------

For a circular lattice the closed orbit may be calculated using
"closed_orbit_calc". By default this routine will track in the
forward direction which is acceptable unless the particle you are
trying to simulate is traveling in the reverse direction and there is
radiation damping on. In this case you must tell
"closed_orbit_calc" to do backward tracking. This routine works by
iteratively converging on the closed orbit using the 1--turn matrix to
calculate the next guess. On rare occasions if the nonlinearities are
strong enough, this can fail to converge. An alternative routine is
"closed_orbit_from_tracking" which tries to do things in a more
robust way but with a large speed penalty.

----------------------------------------------------------------

There are several routines for tracking partially through an element:
  \Hyperrefr:twiss.and.track.at.stwiss_and_track_at_s
  \Hyperrefr:twiss.and.track.intra.eletwiss_and_track_intra_ele
  \Hyperrefr:track.from.s.to.strack_from_s_to_s
  \Hyperrefr:twiss.and.track.from.s.to.stwiss_and_track_from_s_to_s
  \Hyperrefr:mat6.from.s.to.smat6_from_s_to_s
These routines make use of element "slices"  which
are elements that represent some sub-section of an element. There are two
routines for creating slices:
  \Hyperrefr:create.element.slicecreate_element_slice
  \Hyperrefr:create.uniform.element.slicecreate_uniform_element_slice

It is important to note that to slice up a given element, the "s_to_s" tracking
routines will not always work. For example, consider the case where a given element is
followed by a zero length multipole. If "track_from_s_to_s" is called with a value for
"s2" (the value at the end of the track) which corresponds to the exit end of this
element, the result will also include tracking through the zero length multipole. Thus, in
the case where a given element is to be sliced, one or the other of the two slice routines
given above must be first used to create an element slice then this slice can be used for
tracking.

----------------------------------------------------------------

The routine \Hyperrefr:check.aperture.limitcheck_aperture_limit
checks the aperture at a given element. The "ele%aperture_type"
component determines the type of aperture. Possible values for
"ele%aperture_type" are
  rectangular$
  elliptical$
  custom$
With "custom$", a program needs to be linked with a custom version
of
\Hyperrefr:check.aperture.limit.customcheck_aperture_limit_custom.

The logical "bmad_com%aperture_limit_on" determines if element
apertures (See) are used to determine if a
particle has been lost in tracking.  The default
"bmad_com%aperture_limit_on" is True.  Even if this is False
there is a "hard" aperture limit set by
"bmad_com%max_aperture_limit". This hard limit is used to prevent
floating point overflows. The default hard aperture limit is 1000
meters. Additionally, even if a particle is within the hard limit,
some routines will mark a particle as lost if the tracking calculation
will result in an overflow.

"lat%param%lost" is the logical to check to see if a particle has
been lost. "lat%param%ix_lost" is set by "track_all" and gives
the index of the element at which a particle is lost.
"%param%end_lost_at" gives which end the particle was lost at. 
The possible values for "lat%param%end_lost_at" are:
  entrance_end$
  exit_end$
When tracking forward, if a particle is lost at the exit end of an
element then the place where the orbit was outside the aperture is at
"orbit(ix)" where "ix" is the index of the element where the
particle is lost (given by "lat%param%ix_lost"). If the
particle is lost at the entrance end then the appropriate index is one
less (remember that "orbit(i)" is the orbit at the exit end of an
element). 

To tell how a particle is lost, check the "lat%param%plane_lost_at"
parameter. Possible values for this are:
  x_plane$
  y_plane$
  z_plane$
"x_plane$" and "y_plane$" indicate that the particle was lost either horizontally, or
vertically. "z_plane$" indicates that the particle was turned around in an "lcavity"
element. That is, the cavity was decelerating the particle and the particle did not not have enough
energy going into the cavity to make it to the exit.

----------------------------------------------------------------

Custom code can be used for tracking. This is discussed in detail in sections
and.

----------------------------------------------------------------

For each element the method of tracking may be set either via the
input lattice file (see) or directly in the
program by setting the "%tracking_method" attribute of an element
  type (ele_struct) ele
  ...
  ele%tracking_method = symp_lie_ptc$  ! for symp_lie_ptc, tracking
  print *, "Tracking_method: ", calc_method_name(ele%tracking_method)
To form the corresponding parameter to a given tracking method just
put "$" after the name. For example, the "bmad_standard"
tracking method is specified by the "bmad_standard$" parameter. To
convert the integer "%tracking_method" value to a string suitable
for printing, use the "tracking_method_name" array.

It should be noted that except for "linear" tracking, none of the
Bmad tracking routines make use of the "ele%mat6" transfer
matrix. The reverse, however, is not true.  The transfer matrix
routines ("lat_make_mat6", etc.)  will do tracking.

For determining what tracking methods are valid for a given element, use
\Hyperrefr:valid.tracking.methodvalid_tracking_method and
\Hyperrefr:valid.mat6.calc.methodvalid_mat6_calc_method functions
  print *, "Method is valid: ", valid_tracking_method(ele, symp_lie_ptc$)

Bmad simulates radiation damping and excitation by applying a kick
just before and after each element. 

----------------------------------------------------------------

Time tracking uses time as the independent variable as opposed to the standard s based
tracking. Time tracking is useful when a particle's trajectory can reverse itself
longitudinally. For example, low energy particles generated when a relativistic particle hits the
vacuum chamber wall are good candidates for time tracking.

Currently, the only "ele%tracking_method" available for time tracking is
"time_runge_kutta$". Time tracking needs extra bookkeeping due to the fact that the particle may
reverse directions.  See the "dark_current_tracker" program as an example.

Note: Using time as the independent variable can be used with both absolute and relative time
tracking .

----------------------------------------------------------------

Absolute or relative time tracking  can be set after the lattice file is parsed,
by setting the "%absolute_time_tracking" component of the "lat_struct". when
"%absolute_time_tracking" is toggled, the
\Hyperrefr:autoscale.phase.and.ampautoscale_phase_and_amp must be called to reset the
appropriate phase offsets and scale amplitudes.

----------------------------------------------------------------

A list of routines for manipulating Taylor maps is given in~. The order of the Taylor
maps is set in the lattice file using the "parameter" statement . In a program
this can be overridden using the routine \Hyperrefr:set.ptcset_ptc. The routine
\Hyperrefr:taylor.coeftaylor_coef can be used to get the coefficient of any given term in a
Taylor map.
  type (taylor_struct) t_map(6)
  ...
  print *, "out(4)=coef * in(1)^2:", taylor_coef(t_map(4), 1, 1)
  print *, "out(4)=coef * in(1)^2:", taylor_coef(t_map(4), [2,0,0,0,0,0])

Transfer Taylor maps for an element are generated as needed when the
"ele%tracking_method" or "ele%mat6_calc_method" is set to
"Symp_Lie_Bmad", "Symp_Lie_PTC", or
"Taylor". Since generating a map can take an appreciable time,
Bmad follows the rule that once generated, these maps are never
regenerated unless an element attribute is changed.  To generate a
Taylor map within an element irregardless of the
"ele%tracking_method" or "ele%mat6_calc_method" settings use the
routine \Hyperrefr:ele.to.taylorele_to_taylor. This routine will kill any old Taylor map
before making any new one. To kill a Taylor map (which frees up the
memory it takes up) use the routine \Hyperrefr:kill.taylorkill_taylor.

To test whether a "taylor_struct" variable has an associated Taylor
map. That is, to test whether memory has been allocated for the map,
use the Fortran associated function:
  type (bmad_taylor) taylor(6)
  ...
  if (associated(taylor(1)%term)) then  ! If has a map ...
    ...

To concatenate the Taylor maps in a set of elements the routine
\Hyperrefr:concat.taylorconcat_taylor can be used
  type (lat_struct) lat          ! lattice
  type (taylor_struct) taylor(6)  ! taylor map
  ...
  call taylor_make_unit (taylor)  ! Make a unit map
  do i = i1+1, i2
    call concat_taylor (taylor, lat%ele(i)%taylor, taylor)
  enddo
The above example forms the transfer Taylor map starting at the end of
element "i1" to the end of element "i2". Note: This example
assumes that all the elements have a Taylor map. The problem with
concatenating maps is that if there is a constant term in the map
"feed down" can make the result inaccurate (. To
get around this one can "track" a taylor map through an element
using symplectic integration.
  type (lat_struct) lat          ! lattice
  type (taylor_struct) taylor(6)  ! taylor map
  ...
  call taylor_make_unit (taylor)  ! Make a unit map
  do i = i1+1, i2
    call call taylor_propagate1 (taylor, lat%ele(i), lat%param)
  enddo
Symplectic integration is typically much slower than concatenation.  The width of an integration
step is given by "%ele%value(ds_step$".  The attribute "%ele%value(num_steps$)", which gives
the number of integration steps, is a dependent variable  and should not be set
directly.  The order of the integrator  is given by
"%ele%integrator_order".  PTC  currently implements integrators of order 2, 4, or
6.

----------------------------------------------------------------

Tracking backwards happens when a particle goes in the direction of decreasing "s". This is
indicated in the "coord_struct" by "coord%direction = -1". 

The "time_runge_kutta" "tracking_method" is able to handle the situation where a particle
would reverse direction due to string electric or magnetic fields. All other tracking methods are
not able to handle this since they are position (s) based, instead of time based. With non
"time_runge_kutta" tracking methods, the equations of motion become singular when a particle
"tries" to reverse direction. In such a situation, the particle will be marked as lost and the
"coord_struct" will have "%status" /= "alive$".

The "problem" with tracking backwards is that the reference time t_0(s) that is used to compute
the z phase space coordinate (\Eqzbctt) is independent of the motion of any particle. That is, a
particle traveling backwards will have a large negative z. As an alternative to tracking
backwards, reversing the lattice and tracking forwards is possible .

One restriction with backwards tracking is that, for simplicity's sake, Bmad does not
compute transfer matrices for propagation in the backwards direction. Tracking with reversed
elements does not have this restriction.

----------------------------------------------------------------

With a lattice element that is reversed ("s:ele.reverse"), the transfer map and transfer matrix
that is stored in the element is, just like for a non-reversed element, appropriate for a particle
traveling in the +s direction.

----------------------------------------------------------------

Tracking with multiple particles is done with a "beam_struct" instance:
  type beam_struct
    type (bunch_struct), allocatable :: bunch(:)
  end type
A "beam_struct" is composed of an array of bunches of type
"bunch_struct":
  type bunch_struct
    type (coord_struct), allocatable :: particle(:)
    integer, allocatable :: ix_z(:)  ! bunch%ix_z(1) is index of head particle, etc.
    real(rp) charge_tot  ! Total charge in bunch (Coul).
    real(rp) charge_live ! Total charge of live particles in bunch (Coul).
    real(rp) z_center    ! Longitudinal center of bunch (m). Note: Generally, z_center of 
                         !   bunch #1 is 0 and z_center of the other bunches is negative.
    real(rp) t_center    ! Center of bunch creation time relative to head bunch.
    integer species      ! electron$, proton$, etc.
    integer ix_ele       ! Element this bunch is at.
    integer ix_bunch     ! Bunch index. Head bunch = 1, etc.
  end type
The "bunch_struct" has an array of particles of type
"coord_struct" .

Initializing a "beam_struct" to conform to some initial set of
Twiss parameters and emittances is done using the routine
\Hyperrefr:init.beam.distributioninit_beam_distribution: 
  type (lat_struct) lat
  type (beam_init_struct) beam_init
  type (beam_struct) beam
  ...
  call init_beam_distribution (lat%ele(0), lat%param, beam_init, beam)
The "lat%ele(0)" argument, which is of type "ele_struct", gives the twiss parameters to
initialize the beam to. In this case, we are starting tracking from the beginning of the
lattice. The "beam_init" argument which is of type "beam_init" gives additional information,
like emittances, which is needed to initialize the beam. See chapter~ for more
details.

Tracking a beam is done using the \Hyperrefr:track.beamtrack_beam routine
  type (lat_struct) lat
  type (beam_struct) beam
  ...
  call track_beam (lat, beam)
or, for tracking element by element, \Hyperrefr:track1.bunchtrack1_bunch can be used.

For analyzing a bunch of particles, that is, for computing such things as the sigma matrix from the
particle distribution, the \Hyperrefr:calc.bunch.paramscalc_bunch_params routine can be used.

Notice that when a particle bunch is tracked to a given longitudinal position in the lattice, all
the particles of the bunch are at that longitudinal position (this is no different if particles are
tracked individually independent of the bunch). Given that the bunch has a non-zero bunch length,
the current time t(s) associated with the particles will be different for different particles (See
\Eqzbctt). If it is desired to reconstruct the shape of the bunch at \em constant time, each
particle must be tracked either forward or backwards by an appropriate amount. Since this tracking
generally involves only very short distances, it is usually acceptable to ignore any fields and to
propagate the particles as if they were in a field free region.

----------------------------------------------------------------

See Section~ for a list of spin tracking methods available. To turn spin
tracking on, use the "bmad_com%spin_tracking_on" flag. "ele%spin_tracking_method" sets the
method used for spin tracking. After properly initializing the spin in the "coord_struct", calls
to "track1" will track both the particle orbit and the spin.

The Sokolov-Ternov effect\citeb:barber99 is the self-polarization of charged particle beams due to
asymmetric flipping of a particle's spin when the particle is bent in a magnetic field. Whether this
effect is included in a simulation is determined by the setting of
"bmad_com%spin_sokolov_ternov_flipping_on".  Also, spin flipping will \em not be done if spin
tracking is off or both radiation damping and excitation are off.

-------------------------------------------------------------------------

X-rays can have a wide spread of trajectories resulting in many
"doomed" photons that hit apertures or miss the detector with only a
small fraction of "successful" photons actually contributing to the
simulation results. The tracking of doomed photons can therefore
result in an appreciable lengthening of the simulation time. To get
around this, Bmad can be setup to use what is called "targeting" to
minimize the number of doomed photons generated. 

This is explained in detail in. The coordinates of
the four or eight corner points and the center target point are 
stored in:
  gen_ele%photon%target%corner(:)%r(1:3)
  gen_ele%photon%target%center%r(1:3)
where "gen_ele" is the 
generating element (not the element with the aperture).

-------------------------------------------------------------------------
\sectionRecording the Track Through an Element
\labels:track.track

Occasionally it is useful to record the track through an element when tracking with Runge-Kutta,
etc. This can be done by calling \Hyperrefr:track1track1 and supplying the "track" argument. Example:
\beginexample
 type (track_struct) track
 ...
 track%n_pt = -1
 call track1 (start_orb, ele, param, end_orb, track)
\endexample

A "track_struct" structure has components:
\beginexample
 type track_struct
   type (coord_struct), allocatable :: orb(:)      ! An array of track points: %orb(0:)
   type (em_field_struct), allocatable:: field(:)  ! An array of em fields: %field(0:)
   type (track_map_struct), allocatable :: map(:)  ! An array of maps: %cylindrical_map(0:)
   real(rp) :: ds_save = 1e-3                      ! Min distance between points. Not positive => Save at all points.
   integer :: n_pt = -1                            ! Track upper bound for %orb(0:), etc. arrays.
   integer :: n_bad = 0                            ! Number of bad steps when adaptive tracking is done.
   integer :: n_ok = 0                             ! Number of good steps when adaptive tracking is done.
 end type
\endexample
The "%orb" and other arrays 
The "%n_pt" component gives the upp

